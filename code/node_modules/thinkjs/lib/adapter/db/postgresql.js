'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base.js');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PostgreSocket = think.adapter('socket', 'postgresql');
/**
 * postgre db
 */

var _class = function (_Base) {
  (0, _inherits3.default)(_class, _Base);

  function _class() {
    (0, _classCallCheck3.default)(this, _class);
    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));
  }

  /**
   * get postgre socket instance
   * @param  {Object} config []
   * @return {}        []
   */

  _class.prototype.socket = function socket(sql) {
    if (this._socket) {
      return this._socket;
    }
    var config = think.extend({
      sql: sql
    }, this.config);
    this._socket = PostgreSocket.getInstance(config, thinkCache.DB, ['sql']);
    return this._socket;
  };
  /**
   * get table info
   * @param  {String} table [table name]
   * @return {Promise}       []
   */


  _class.prototype.getSchema = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {
      var columnSql, columnsPromise, indexSql, indexPromise, _ref, columns, indexs, schema, extra, reg;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              columnSql = 'SELECT column_name,is_nullable,data_type FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=\'' + table + '\'';
              columnsPromise = this.query(columnSql);
              indexSql = 'SELECT indexname,indexdef FROM pg_indexes WHERE tablename=\'' + table + '\'';
              indexPromise = this.query(indexSql);
              _context.next = 6;
              return _promise2.default.all([columnsPromise, indexPromise]);

            case 6:
              _ref = _context.sent;
              columns = _ref[0];
              indexs = _ref[1];
              schema = {};

              columns.forEach(function (item) {
                schema[item.column_name] = {
                  name: item.column_name,
                  type: item.data_type,
                  required: item.is_nullable === 'NO',
                  default: '',
                  auto_increment: false
                };
              });
              extra = {};
              reg = /\((\w+)(?:, (\w+))*\)/;

              indexs.forEach(function (item) {
                var _item$indexdef$match = item.indexdef.match(reg);

                var name = _item$indexdef$match[1];

                var others = _item$indexdef$match.slice(2);

                extra[name] = {};
                if (item.indexdef.indexOf(' pkey ') > -1) {
                  extra[name].primary = true;
                }
                var index = item.indexdef.indexOf(' UNIQUE ') > -1 ? 'unique' : 'index';
                extra[name][index] = others.length ? others : true;
              });

              return _context.abrupt('return', think.extend(schema, extra));

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return function getSchema(_x) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * start transaction
   * @return {Promise} []
   */


  _class.prototype.startTrans = function startTrans() {
    if (this.transTimes === 0) {
      this.transTimes++;
      return this.execute('BEGIN');
    }
    this.transTimes++;
    return _promise2.default.resolve();
  };
  /**
   * parse limit
   * @param  {String} limit []
   * @return {String}       []
   */


  _class.prototype.parseLimit = function parseLimit(limit) {
    if (think.isEmpty(limit)) {
      return '';
    }
    if (think.isNumber(limit)) {
      return ' LIMIT ' + limit;
    }
    if (think.isString(limit)) {
      limit = limit.split(/\s*,\s*/);
    }
    if (limit[1]) {
      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);
    }
    return ' LIMIT ' + (limit[0] | 0);
  };

  return _class;
}(_base2.default);

exports.default = _class;