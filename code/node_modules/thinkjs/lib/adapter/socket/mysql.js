'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base.js');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * mysql socket class
 * @return {} []
 */

var _class = function (_Base) {
  (0, _inherits3.default)(_class, _Base);

  function _class() {
    (0, _classCallCheck3.default)(this, _class);
    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));
  }

  /**
   * init
   * @param  {Object} config [connection options]
   * @return {}        []
   */

  _class.prototype.init = function init() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _Base.prototype.init.call(this, config);

    //alias password config
    // if (config.pwd) {
    //   config.password = config.pwd;
    //   delete config.pwd;
    // }
    //merge config
    this.config = think.extend({
      host: '127.0.0.1',
      user: 'root',
      password: ''
    }, config);
    this.config.port = this.config.port || 3306;

    this.pool = null;
  };
  /**
   * get connection
   * @return {Promise} [conneciton handle]
   */


  _class.prototype.getConnection = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
      var _this2 = this;

      var config, str, fn, promise, err, mysql;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.connection) {
                _context.next = 2;
                break;
              }

              return _context.abrupt('return', this.connection);

            case 2:
              config = this.config;
              str = 'mysql://' + config.user + ':' + config.password + '@' + config.host + ':' + config.port + '/' + config.database;

              if (!this.pool) {
                _context.next = 9;
                break;
              }

              fn = think.promisify(this.pool.getConnection, this.pool);
              promise = fn().catch(function (err) {
                _this2.close();
                return _promise2.default.reject(err);
              });
              err = new Error(str);
              return _context.abrupt('return', think.error(promise, err));

            case 9:
              _context.next = 11;
              return think.npm('mysql');

            case 11:
              mysql = _context.sent;

              if (!config.connectionLimit) {
                _context.next = 16;
                break;
              }

              this.logConnect(str, 'mysql');

              this.pool = mysql.createPool(config);
              return _context.abrupt('return', this.getConnection());

            case 16:
              return _context.abrupt('return', think.await(str, function () {
                var deferred = think.defer();
                _this2.connection = mysql.createConnection(config);
                _this2.connection.connect(function (err) {

                  _this2.logConnect(str, 'mysql');

                  if (err) {
                    deferred.reject(err);
                    _this2.close();
                  } else {
                    deferred.resolve(_this2.connection);
                  }
                });
                _this2.connection.on('error', function () {
                  _this2.close();
                });
                //PROTOCOL_CONNECTION_LOST
                _this2.connection.on('end', function () {
                  _this2.connection = null;
                });
                var err = new Error(str);
                return think.error(deferred.promise, err);
              }));

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return function getConnection() {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * query sql
   * @param  {String} sql []
   * @return {[type]}     []
   */


  _class.prototype.query = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(sql, nestTables) {
      var _this3 = this;

      var connection, data, startTime, fn, promise;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getConnection();

            case 2:
              connection = _context2.sent;
              data = {
                sql: sql,
                nestTables: nestTables
              };
              //query timeout

              if (this.config.timeout) {
                data.timeout = this.config.timeout;
              }
              startTime = Date.now();
              fn = think.promisify(connection.query, connection);
              promise = fn(data).then(function () {
                var rows = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

                // just call connection.release() and the connection will return to the pool,
                // ready to be used again by someone else.
                // https://github.com/felixge/node-mysql#pooling-connections
                if (_this3.pool && connection.release) {
                  connection.release();
                }

                if (_this3.config.log_sql) {
                  think.log(sql, 'SQL', startTime);
                }
                return rows;
              }).catch(function (err) {
                if (_this3.pool && connection.release) {
                  connection.release();
                }
                //Connection lost: The server closed the connection.
                if (err.code === 'PROTOCOL_CONNECTION_LOST') {
                  _this3.close();
                }

                if (_this3.config.log_sql) {
                  think.log(sql, 'SQL', startTime);
                }
                return _promise2.default.reject(err);
              });

              promise = this.autoClose(promise);
              return _context2.abrupt('return', think.error(promise));

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
    return function query(_x2, _x3) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * execute
   * @param  {Array} args []
   * @return {Promise}         []
   */


  _class.prototype.execute = function execute() {
    return this.query.apply(this, arguments);
  };
  /**
   * close connections
   * @return {} []
   */


  _class.prototype.close = function close() {
    var _this4 = this;

    if (this.pool) {
      this.pool.end(function () {
        return _this4.pool = null;
      });
    } else if (this.connection) {
      this.connection.end(function () {
        return _this4.connection = null;
      });
    }
  };

  return _class;
}(_base2.default);

exports.default = _class;