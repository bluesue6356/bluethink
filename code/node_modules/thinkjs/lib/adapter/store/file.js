'use strict';

exports.__esModule = true;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * file store class
 */

var _class = function (_think$adapter$base) {
  (0, _inherits3.default)(_class, _think$adapter$base);

  function _class() {
    (0, _classCallCheck3.default)(this, _class);
    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));
  }

  /**
   * init
   * @param  {Object} config []
   * @return {}        []
   */

  _class.prototype.init = function init(config) {
    this.config = think.extend({
      path: ''
    }, config);

    if (!this.config.path) {
      throw new Error('path must be defined.');
    }

    if (!think.isDir(this.config.path)) {
      think.mkdir(this.config.path);
    }
  };
  /**
   * get data
   * @param  {String} key []
   * @return {Promise}     []
   */


  _class.prototype.get = function get(key) {
    var filepath = this.config.path + _path2.default.sep + key;
    if (!think.isFile(filepath)) {
      return _promise2.default.resolve();
    }
    return think.promisify(_fs2.default.readFile, _fs2.default)(filepath, { encoding: 'utf8' });
  };
  /**
   * set file content
   * @param {String} key     []
   * @param {String} content []
   */


  _class.prototype.set = function set(key, content) {
    var filepath = this.config.path + _path2.default.sep + key;
    think.mkdir(_path2.default.dirname(filepath));
    var fn = think.promisify(_fs2.default.writeFile, _fs2.default);
    return fn(filepath, content).then(function () {
      think.chmod(filepath);
    });
  };
  /**
   * delete file
   * @param  {String} key []
   * @return {Promise}     []
   */


  _class.prototype.delete = function _delete(key) {
    var filepath = this.config.path + _path2.default.sep + key;
    if (!think.isFile(filepath)) {
      return _promise2.default.resolve();
    }
    return think.promisify(_fs2.default.unlink, _fs2.default)(filepath);
  };
  /**
   * get all files
   * @return {Promise} []
   */


  _class.prototype.list = function list() {
    return _promise2.default.resolve(think.getFiles(this.config.path));
  };

  return _class;
}(think.adapter.base);

exports.default = _class;