'use strict';

exports.__esModule = true;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _base = require('./_base.js');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * model base class
 * @type {Class}
 */

var _class = function (_Base) {
  (0, _inherits3.default)(_class, _Base);

  function _class() {
    (0, _classCallCheck3.default)(this, _class);
    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));
  }

  /**
   * get table schema
   * @param  {String} table [table name]
   * @return {}       []
   */

  _class.prototype.getSchema = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {
      var storeKey, schema, name;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              table = table || this.getTableName();
              storeKey = this.config.type + '_' + table + '_schema';
              schema = thinkCache(thinkCache.TABLE, storeKey);

              if (schema) {
                _context.next = 8;
                break;
              }

              _context.next = 6;
              return this.db().getSchema(table);

            case 6:
              schema = _context.sent;

              thinkCache(thinkCache.TABLE, storeKey, schema);

            case 8:
              if (!(table !== this.getTableName())) {
                _context.next = 10;
                break;
              }

              return _context.abrupt('return', schema);

            case 10:
              _context.t0 = _regenerator2.default.keys(schema);

            case 11:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 18;
                break;
              }

              name = _context.t1.value;

              if (!schema[name].primary) {
                _context.next = 16;
                break;
              }

              this.pk = name;
              return _context.abrupt('break', 18);

            case 16:
              _context.next = 11;
              break;

            case 18:
              //merge user set schema config
              this.schema = think.extend({}, schema, this.schema);
              return _context.abrupt('return', this.schema);

            case 20:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return function getSchema(_x) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get table fields
   * @param  {String} table []
   * @return {Promise}       []
   */


  _class.prototype.getTableFields = function getTableFields(table) {
    think.log('model.getTableFields is deprecated, use model.getSchema instead.', 'WARNING');
    return this.getSchema(table);
  };
  /**
   * get unique field
   * @param  {Object} data []
   * @return {Promise}      []
   */


  _class.prototype.getUniqueField = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(data) {
      var schema, _name;

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getSchema();

            case 2:
              schema = _context2.sent;
              _context2.t0 = _regenerator2.default.keys(schema);

            case 4:
              if ((_context2.t1 = _context2.t0()).done) {
                _context2.next = 10;
                break;
              }

              _name = _context2.t1.value;

              if (!(schema[_name].unique && (!data || data[_name]))) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt('return', _name);

            case 8:
              _context2.next = 4;
              break;

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
    return function getUniqueField(_x2) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get last sql
   * @return {Promise} []
   */


  _class.prototype.getLastSql = function getLastSql() {
    return this.db().getLastSql();
  };
  /**
   * get primary key
   * @return {Promise} []
   */


  _class.prototype.getPk = function getPk() {
    var _this2 = this;

    if (this.pk !== 'id') {
      return _promise2.default.resolve(this.pk);
    }
    return this.getSchema().then(function () {
      return _this2.pk;
    });
  };
  /**
   * build sql
   * @param  {[type]} options [description]
   * @return {[type]}         [description]
   */


  _class.prototype.buildSql = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(options) {
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.parseOptions(options);

            case 2:
              options = _context3.sent;
              return _context3.abrupt('return', '( ' + this.db().buildSelectSql(options).trim() + ' )');

            case 4:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));
    return function buildSql(_x3) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * parse options
   * @param  {Object} options []
   * @return promise         []
   */


  _class.prototype.parseOptions = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(oriOpts, extraOptions) {
      var options, schema, keyReg, key, msg;
      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              options = think.extend({}, this._options);

              if (think.isObject(oriOpts)) {
                options = think.extend(options, oriOpts);
              }
              if (extraOptions) {
                options = think.extend(options, extraOptions);
              }
              //clear options
              this._options = {};
              //get table name
              options.table = options.table || this.getTableName();

              options.tablePrefix = this.getTablePrefix();
              options.model = this.getModelName();

              //get table schema can not use table alias
              _context4.next = 9;
              return this.getSchema(options.table);

            case 9:
              schema = _context4.sent;


              //table alias
              if (options.alias) {
                options.table += ' AS ' + options.alias;
              }

              if (oriOpts !== undefined && !think.isObject(oriOpts)) {
                options = think.extend(options, this.parseWhereOptions(oriOpts));
              }
              //check where key

              if (!(options.where && !think.isEmpty(schema))) {
                _context4.next = 22;
                break;
              }

              keyReg = /^[\w\.\|\&]+$/;
              _context4.t0 = _regenerator2.default.keys(options.where);

            case 15:
              if ((_context4.t1 = _context4.t0()).done) {
                _context4.next = 22;
                break;
              }

              key = _context4.t1.value;

              if (keyReg.test(key)) {
                _context4.next = 20;
                break;
              }

              msg = new Error(think.locale('FIELD_KEY_NOT_VALID', key));
              return _context4.abrupt('return', think.reject(msg));

            case 20:
              _context4.next = 15;
              break;

            case 22:
              //field reverse
              if (options.field && options.fieldReverse) {
                (function () {
                  //reset fieldReverse value
                  options.fieldReverse = false;
                  var optionsField = options.field;
                  options.field = (0, _keys2.default)(schema).filter(function (item) {
                    if (optionsField.indexOf(item) === -1) {
                      return item;
                    }
                  });
                })();
              }
              return _context4.abrupt('return', this.optionsFilter(options, schema));

            case 24:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));
    return function parseOptions(_x4, _x5) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * parse where options
   * @return {Object} 
   */


  _class.prototype.parseWhereOptions = function parseWhereOptions(options) {
    if (think.isNumber(options) || think.isString(options)) {
      var _where;

      options += '';
      var where = (_where = {}, _where[this.pk] = options.indexOf(',') > -1 ? { IN: options } : options, _where);
      return { where: where };
    }
    return options;
  };
  /**
   * parse type
   * @param  {Object} data []
   * @param  {} key  []
   * @return {}      []
   */


  _class.prototype.parseType = function parseType(key, value) {
    var fieldType = this.schema[key].type || '';
    if (fieldType.indexOf('bigint') === -1 && fieldType.indexOf('int') > -1) {
      return parseInt(value, 10) || 0;
    } else if (fieldType.indexOf('double') > -1 || fieldType.indexOf('float') > -1) {
      return parseFloat(value) || 0.0;
    } else if (fieldType.indexOf('bool') > -1) {
      return !!value;
    }
    return value;
  };
  /**
   * parse data, after fields getted
   * @param  {} data []
   * @return {}      []
   */


  _class.prototype.parseData = function parseData(data) {
    //deep clone data
    data = think.extend({}, data);
    for (var _key in data) {
      var val = data[_key];
      //remove data not in fields
      if (!this.schema[_key]) {
        delete data[_key];
      } else if (think.isNumber(val) || think.isString(val) || think.isBoolean(val)) {
        data[_key] = this.parseType(_key, val);
      }
    }
    return this.dataFilter(data);
  };
  /**
   * add data
   * @param {Object} data    []
   * @param {Object} options []
   * @param {} replace []
   */


  _class.prototype.add = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(data, options, replace) {
      var _think$extend;

      var parsedData, _msg, insertId, copyData;

      return _regenerator2.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (options === true) {
                replace = true;
                options = {};
              }
              //copy data
              data = think.extend({}, this._data, data);
              //clear data
              this._data = {};

              _context5.next = 5;
              return this.parseOptions(options);

            case 5:
              options = _context5.sent;
              parsedData = this.parseData(data);
              _context5.next = 9;
              return this.beforeAdd(parsedData, options);

            case 9:
              parsedData = _context5.sent;

              if (!think.isEmpty(parsedData)) {
                _context5.next = 13;
                break;
              }

              _msg = new Error(think.locale('DATA_EMPTY'));
              return _context5.abrupt('return', think.reject(_msg));

            case 13:
              _context5.next = 15;
              return this.db().add(parsedData, options, replace);

            case 15:
              insertId = parsedData[this.pk] = this.db().getLastInsertId();
              copyData = think.extend({}, data, parsedData, (_think$extend = {}, _think$extend[this.pk] = insertId, _think$extend));
              _context5.next = 19;
              return this.afterAdd(copyData, options);

            case 19:
              return _context5.abrupt('return', insertId);

            case 20:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));
    return function add(_x6, _x7, _x8) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * then add
   * @param  {Object} data       []
   * @param  {Object} where      []
   * @return {}            []
   */


  _class.prototype.thenAdd = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(data, where) {
      var _ref2;

      var findData, _ref, insertId;

      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.where(where).find();

            case 2:
              findData = _context6.sent;

              if (think.isEmpty(findData)) {
                _context6.next = 5;
                break;
              }

              return _context6.abrupt('return', (_ref = {}, _ref[this.pk] = findData[this.pk], _ref.type = 'exist', _ref));

            case 5:
              _context6.next = 7;
              return this.add(data);

            case 7:
              insertId = _context6.sent;
              return _context6.abrupt('return', (_ref2 = {}, _ref2[this.pk] = insertId, _ref2.type = 'add', _ref2));

            case 9:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));
    return function thenAdd(_x9, _x10) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * add multi data
   * @param {Object} data    []
   * @param {} options []
   * @param {} replace []
   */


  _class.prototype.addMany = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(data, options, replace) {
      var _this3 = this;

      var promises, insertId, insertIds;
      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(!think.isArray(data) || !think.isObject(data[0]))) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt('return', think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY'))));

            case 2:
              if (options === true) {
                replace = true;
                options = {};
              }
              _context7.next = 5;
              return this.parseOptions(options);

            case 5:
              options = _context7.sent;
              promises = data.map(function (item) {
                item = _this3.parseData(item);
                return _this3.beforeAdd(item, options);
              });
              _context7.next = 9;
              return _promise2.default.all(promises);

            case 9:
              data = _context7.sent;
              _context7.next = 12;
              return this.db().addMany(data, options, replace);

            case 12:
              insertId = this.db().getLastInsertId() - data.length + 1;
              insertIds = [];

              promises = data.map(function (item, i) {
                var id = insertId + i;
                item[_this3.pk] = id;
                insertIds.push(id);
                return _this3.afterAdd(item, options);
              });
              _context7.next = 17;
              return _promise2.default.all(promises);

            case 17:
              data = _context7.sent;
              return _context7.abrupt('return', insertIds);

            case 19:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));
    return function addMany(_x11, _x12, _x13) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * delete data
   * @param  {Object} options []
   * @return {Promise}         []
   */


  _class.prototype.delete = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(options) {
      var rows;
      return _regenerator2.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.parseOptions(options);

            case 2:
              options = _context8.sent;
              _context8.next = 5;
              return this.db().delete(options);

            case 5:
              rows = _context8.sent;
              _context8.next = 8;
              return this.afterDelete(options);

            case 8:
              return _context8.abrupt('return', rows);

            case 9:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));
    return function _delete(_x14) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * update data
   * @param  {Object} data      []
   * @param  {Object} options   []
   * @param  {Boolean} ignoreWhere []
   * @return {Promise}          []
   */


  _class.prototype.update = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(data, options) {
      var parsedData, pk, _options$where, rows, copyData;

      return _regenerator2.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:

              data = think.extend({}, this._data, data);
              //clear data
              this._data = {};

              _context9.next = 4;
              return this.parseOptions(options);

            case 4:
              options = _context9.sent;
              parsedData = this.parseData(data);

              //check where condition

              if (!think.isEmpty(options.where)) {
                _context9.next = 16;
                break;
              }

              _context9.next = 9;
              return this.getPk();

            case 9:
              pk = _context9.sent;

              if (!parsedData[pk]) {
                _context9.next = 15;
                break;
              }

              options.where = (_options$where = {}, _options$where[pk] = parsedData[pk], _options$where);
              delete parsedData[pk];
              _context9.next = 16;
              break;

            case 15:
              return _context9.abrupt('return', think.reject(new Error(think.locale('MISS_WHERE_CONDITION'))));

            case 16:
              _context9.next = 18;
              return this.beforeUpdate(parsedData, options);

            case 18:
              parsedData = _context9.sent;

              if (!think.isEmpty(parsedData)) {
                _context9.next = 21;
                break;
              }

              return _context9.abrupt('return', think.reject(new Error(think.locale('DATA_EMPTY'))));

            case 21:
              _context9.next = 23;
              return this.db().update(parsedData, options);

            case 23:
              rows = _context9.sent;
              copyData = think.extend({}, data, parsedData);
              _context9.next = 27;
              return this.afterUpdate(copyData, options);

            case 27:
              return _context9.abrupt('return', rows);

            case 28:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));
    return function update(_x15, _x16) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * update all data
   * @param  {Array} dataList []
   * @return {Promise}          []
   */


  _class.prototype.updateMany = function updateMany(dataList, options) {
    var _this4 = this;

    if (!think.isArray(dataList)) {
      //empty data and options
      this._options = {};
      this._data = {};

      return think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY')));
    }
    var promises = dataList.map(function (data) {
      return _this4.update(data, options);
    });
    return _promise2.default.all(promises).then(function (data) {
      return data.reduce(function (a, b) {
        return a + b;
      });
    });
  };
  /**
   * increment field data
   * @return {Promise} []
   */


  _class.prototype.increment = function increment(field) {
    var _data;

    var step = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    var data = (_data = {}, _data[field] = ['exp', field + '+' + step], _data);
    return this.update(data);
  };
  /**
   * decrement field data
   * @return {} []
   */


  _class.prototype.decrement = function decrement(field) {
    var _data2;

    var step = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    var data = (_data2 = {}, _data2[field] = ['exp', field + '-' + step], _data2);
    return this.update(data);
  };
  /**
   * find data
   * @return Promise
   */


  _class.prototype.find = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(options) {
      var data;
      return _regenerator2.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.parseOptions(options, { limit: 1 });

            case 2:
              options = _context10.sent;
              _context10.next = 5;
              return this.db().select(options);

            case 5:
              data = _context10.sent;
              return _context10.abrupt('return', this.afterFind(data[0] || {}, options));

            case 7:
            case 'end':
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));
    return function find(_x19) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * select
   * @return Promise
   */


  _class.prototype.select = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(options) {
      var data;
      return _regenerator2.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.parseOptions(options);

            case 2:
              options = _context11.sent;
              _context11.next = 5;
              return this.db().select(options);

            case 5:
              data = _context11.sent;
              return _context11.abrupt('return', this.afterSelect(data, options));

            case 7:
            case 'end':
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));
    return function select(_x20) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * select add
   * @param  {} options []
   * @return {Promise}         []
   */


  _class.prototype.selectAdd = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(options) {
      var promise, Class, data, fields;
      return _regenerator2.default.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              promise = _promise2.default.resolve(options);
              Class = module.exports.default || module.exports;

              if (options instanceof Class) {
                promise = options.parseOptions();
              }
              _context12.next = 5;
              return _promise2.default.all([this.parseOptions(), promise]);

            case 5:
              data = _context12.sent;
              fields = data[0].field || (0, _keys2.default)(this.schema);
              return _context12.abrupt('return', this.db().selectAdd(fields, data[0].table, data[1]));

            case 8:
            case 'end':
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));
    return function selectAdd(_x21) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * count select
   * @param  options  
   * @param  pageFlag 
   * @return promise         
   */


  _class.prototype.countSelect = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(options, pageFlag) {
      var count, pk, table, numsPerPage, data, totalPage, result;
      return _regenerator2.default.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              count = undefined;

              if (think.isBoolean(options)) {
                pageFlag = options;
                options = {};
              } else if (think.isNumber(options)) {
                count = options;
                options = {};
              }

              _context13.next = 4;
              return this.parseOptions(options);

            case 4:
              options = _context13.sent;
              pk = this.pk;
              table = options.alias || this.getTableName();

              //delete table options avoid error when has alias

              delete options.table;

              if (count) {
                _context13.next = 12;
                break;
              }

              _context13.next = 11;
              return this.options(options).count(table + '.' + pk);

            case 11:
              count = _context13.sent;

            case 12:

              options.limit = options.limit || [0, this.config.nums_per_page];

              numsPerPage = options.limit[1];
              //get page options

              data = { numsPerPage: numsPerPage };
              totalPage = Math.ceil(count / data.numsPerPage);


              data.currentPage = parseInt(options.limit[0] / options.limit[1] + 1);

              if (think.isBoolean(pageFlag) && data.currentPage > totalPage) {
                if (pageFlag) {
                  data.currentPage = 1;
                  options.limit = [0, numsPerPage];
                } else {
                  data.currentPage = totalPage;
                  options.limit = [(totalPage - 1) * numsPerPage, numsPerPage];
                }
              }
              result = think.extend({ count: count, totalPages: totalPage }, data);


              if (options.cache && options.cache.key) {
                options.cache.key += '_count';
              }

              if (!count) {
                _context13.next = 26;
                break;
              }

              _context13.next = 23;
              return this.select(options);

            case 23:
              _context13.t0 = _context13.sent;
              _context13.next = 27;
              break;

            case 26:
              _context13.t0 = [];

            case 27:
              result.data = _context13.t0;
              return _context13.abrupt('return', result);

            case 29:
            case 'end':
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));
    return function countSelect(_x22, _x23) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get field data
   * @return {[type]} [description]
   */


  _class.prototype.getField = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(field, one) {
      var options, data, multi, _ret2;

      return _regenerator2.default.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.parseOptions({ 'field': field });

            case 2:
              options = _context14.sent;

              if (think.isNumber(one)) {
                options.limit = one;
              } else if (one === true) {
                options.limit = 1;
              }
              _context14.next = 6;
              return this.db().select(options);

            case 6:
              data = _context14.sent;
              multi = field.indexOf(',') > -1;

              if (!multi) {
                _context14.next = 14;
                break;
              }

              _ret2 = function () {
                var fields = field.split(/\s*,\s*/);
                var result = {};
                fields.forEach(function (item) {
                  return result[item] = [];
                });
                data.every(function (item) {
                  fields.forEach(function (fItem) {
                    if (one === true) {
                      result[fItem] = item[fItem];
                    } else {
                      result[fItem].push(item[fItem]);
                    }
                  });
                  return one !== true;
                });
                return {
                  v: result
                };
              }();

              if (!((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === "object")) {
                _context14.next = 12;
                break;
              }

              return _context14.abrupt('return', _ret2.v);

            case 12:
              _context14.next = 16;
              break;

            case 14:
              data = data.map(function (item) {
                for (var _key2 in item) {
                  return item[_key2];
                }
              });
              return _context14.abrupt('return', one === true ? data[0] : data);

            case 16:
            case 'end':
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));
    return function getField(_x24, _x25) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get quote field
   * @param  {String} field []
   * @return {String}       []
   */


  _class.prototype._getQuoteField = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(field) {
      return _regenerator2.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (!field) {
                _context15.next = 2;
                break;
              }

              return _context15.abrupt('return', /^\w+$/.test(field) ? '`' + field + '`' : field);

            case 2:
              _context15.next = 4;
              return this.getPk();

            case 4:
              _context15.t0 = _context15.sent;

              if (_context15.t0) {
                _context15.next = 7;
                break;
              }

              _context15.t0 = '*';

            case 7:
              return _context15.abrupt('return', _context15.t0);

            case 8:
            case 'end':
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));
    return function _getQuoteField(_x26) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get count
   * @param  {String} field []
   * @return {Promise}       []
   */


  _class.prototype.count = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(field) {
      return _regenerator2.default.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this._getQuoteField(field);

            case 2:
              field = _context16.sent;
              return _context16.abrupt('return', this.getField('COUNT(' + field + ') AS think_count', true));

            case 4:
            case 'end':
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));
    return function count(_x27) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get sum
   * @param  {String} field []
   * @return {Promise}       []
   */


  _class.prototype.sum = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(field) {
      return _regenerator2.default.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this._getQuoteField(field);

            case 2:
              field = _context17.sent;
              return _context17.abrupt('return', this.getField('SUM(' + field + ') AS think_sum', true));

            case 4:
            case 'end':
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));
    return function sum(_x28) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get min value
   * @param  {String} field []
   * @return {Promise}       []
   */


  _class.prototype.min = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(field) {
      return _regenerator2.default.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this._getQuoteField(field);

            case 2:
              field = _context18.sent;
              return _context18.abrupt('return', this.getField('MIN(' + field + ') AS think_min', true));

            case 4:
            case 'end':
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));
    return function min(_x29) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get max valud
   * @param  {String} field []
   * @return {Promise}       []
   */


  _class.prototype.max = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(field) {
      return _regenerator2.default.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this._getQuoteField(field);

            case 2:
              field = _context19.sent;
              return _context19.abrupt('return', this.getField('MAX(' + field + ') AS think_max', true));

            case 4:
            case 'end':
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));
    return function max(_x30) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * get value average
   * @param  {String} field []
   * @return {Promise}       []
   */


  _class.prototype.avg = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20(field) {
      return _regenerator2.default.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this._getQuoteField(field);

            case 2:
              field = _context20.sent;
              return _context20.abrupt('return', this.getField('AVG(' + field + ') AS think_avg', true));

            case 4:
            case 'end':
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));
    return function avg(_x31) {
      return ref.apply(this, arguments);
    };
  }();
  /**
   * query
   * @return {Promise} []
   */


  _class.prototype.query = function query() {
    var sql = this.parseSql.apply(this, arguments);
    return this.db().select(sql, this._options.cache);
  };
  /**
   * execute sql
   * @param  {[type]} sql   [description]
   * @param  {[type]} parse [description]
   * @return {[type]}       [description]
   */


  _class.prototype.execute = function execute() {
    var sql = this.parseSql.apply(this, arguments);
    return this.db().execute(sql);
  };
  /**
   * parse sql
   * @return promise [description]
   */


  _class.prototype.parseSql = function parseSql() {
    var _this5 = this;

    var sql = _util2.default.format.apply(_util2.default, arguments);
    //replace table name
    return sql.replace(/\s__([A-Z]+)__\s/g, function (a, b) {
      if (b === 'TABLE') {
        return ' `' + _this5.getTableName() + '` ';
      }
      return ' `' + _this5.getTablePrefix() + b.toLowerCase() + '` ';
    });
  };
  /**
   * start transaction
   * @return {Promise} []
   */


  _class.prototype.startTrans = function startTrans() {
    return this.db().startTrans();
  };
  /**
   * commit transcation
   * @return {Promise} []
   */


  _class.prototype.commit = function commit() {
    return this.db().commit();
  };
  /**
   * rollback transaction
   * @return {Promise} []
   */


  _class.prototype.rollback = function rollback() {
    return this.db().rollback();
  };
  /**
   * transaction exec functions
   * @param  {Function} fn [exec function]
   * @return {Promise}      []
   */


  _class.prototype.transaction = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee21(fn) {
      var result;
      return _regenerator2.default.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              result = undefined;
              _context21.next = 3;
              return this.startTrans();

            case 3:
              _context21.prev = 3;
              _context21.next = 6;
              return think.co(fn());

            case 6:
              result = _context21.sent;
              _context21.next = 9;
              return this.commit();

            case 9:
              _context21.next = 15;
              break;

            case 11:
              _context21.prev = 11;
              _context21.t0 = _context21['catch'](3);
              _context21.next = 15;
              return this.rollback();

            case 15:
              return _context21.abrupt('return', result);

            case 16:
            case 'end':
              return _context21.stop();
          }
        }
      }, _callee21, this, [[3, 11]]);
    }));
    return function transaction(_x32) {
      return ref.apply(this, arguments);
    };
  }();

  return _class;
}(_base2.default);

exports.default = _class;